interface sql {
    /// Information about a SQL type as used by the underlying database driver.
    /// 
    /// These map fairly closely to the underlying SQLx implementation in the
    /// runtime.
    resource type-info {
        /// The database system name of this type.
        /// 
        /// This will not include length specifiers. The type name returned
        /// is a rough approximation of how it would be written in SQL for the
        /// database.
        name: func() -> string;

        /// Whether `self` and `other` represent mutually compatible types.
        compatible: func(other: borrow<type-info>) -> bool;

        /// Whether `self` and `other` represent exactly the same type.
        equal: func(other: borrow<type-info>) -> bool;

        /// Create a clone of this type-info.
        clone: func() -> type-info;

        /// Serialize this type-info to json.
        /// 
        /// The actual json returned by this function is not meant to be introspected.
        serialize: func() -> result<string, string>;

        /// Deserialize the type-info from json.
        deserialize: static func(json: string) -> result<type-info, string>;

        /// Attempt to create a type directly from a name.
        /// 
        /// This provides no guarantee that there is actually a type with that
        /// name within the database. Attempting to use a type that doesn't
        /// exist will result in a failure when making a query.
        /// 
        /// This returns an error if there is no type with the provided name
        /// within the database.
        @since(version = 2.3.0)
        with-name: static func(name: string) -> result<type-info, string>;

        /// Attempt to create an array of the named type.
        /// 
        /// This provides no guarantee that there is actually a type with that
        /// name within the database. Attempting to use a type that doesn't
        /// exist will result in a failure when making a query.
        // with-array-of: static func(name: string) -> result<type-info>;

        boolean: static func() -> type-info;
        float4: static func() -> type-info;
        float8: static func() -> type-info;
        int1: static func() -> type-info;
        int2: static func() -> type-info;
        int4: static func() -> type-info;
        int8: static func() -> type-info;
        text: static func() -> type-info;
        bytea: static func() -> type-info;
        timestamptz: static func() -> type-info;
        timestamp: static func() -> type-info;
        uuid: static func() -> type-info;
        jsonb: static func() -> type-info;
        inet: static func() -> type-info;
        
        boolean-array: static func() -> type-info;
        float4-array: static func() -> type-info;
        float8-array: static func() -> type-info;
        int1-array: static func() -> type-info;
        int2-array: static func() -> type-info;
        int4-array: static func() -> type-info;
        int8-array: static func() -> type-info;
        text-array: static func() -> type-info;
        bytea-array: static func() -> type-info;
        timestamptz-array: static func() -> type-info;
        timestamp-array: static func() -> type-info;
        uuid-array: static func() -> type-info;
        jsonb-array: static func() -> type-info;
        inet-array: static func() -> type-info;
    }
    

    /// A timestamp recording a point in time without a timezone.
    record timestamp {
        seconds: s64,
        subsec-nanos: u32,
    }

    /// A timestamp combined with a utc offset representing a timezone.
    record timestamptz {
        seconds: s64,
        subsec-nanos: u32,

        /// Positive values are on the eastern hemisphere while negative
        /// values are on the western hemisphere.
        offset: s32,
    }

    /// A UUID.
    /// 
    /// Since WIT does not support 128-bit integers the uuid is split into the
    /// hi and lo 64 bits here.
    record uuid {
        hi: u64,
        lo: u64
    }

    /// An IPv4 network range.
    record ipv4-network {
        /// The IP representation in little-endian byte order.
        addr: u32,

        /// The network prefix.
        /// 
        /// Constructing values with a IPv4 prefix larger than 32 will result in
        /// an error when constructing a value.
        prefix: u8
    }

    /// An IPv6 network range.
    record ipv6-network {
        /// The 128-bit IPv6 address, split into the low-128 bits followed by
        /// high-128 bits.
        /// 
        /// This ensures that the representation in memory is in little-endian
        /// byte order.
        addr: tuple<u64, u64>,

        /// The network prefix.
        /// 
        /// Constructing values with a IPv6 prefix larger than 128 will result
        /// in an error when constructing a value.
        prefix: u8,
    }

    /// An IP network range, either v4 or v6.
    variant ip-network {
        v4(ipv4-network),
        v6(ipv6-network)
    }

    /// A database value.
    /// 
    /// This is opaque so that new value types can be added in the future
    /// without having to bump make breaking changes to the API here.
    resource value {
        /// Whether this value is NULL.
        /// 
        /// If this is true then all of the `as-*` methods will return none.
        is-null: func() -> bool;

        /// The type of this value.
        type-info: func() -> type-info;
        
        /// Create a clone of this value.
        clone: func() -> value;
        
        /// Serialize this type-info to json.
        /// 
        /// The actual json returned by this function is not meant to be introspected.
        serialize: func() -> result<string, string>;

        /// Deserialize the type-info from json.
        deserialize: static func(json: string) -> result<value, string>;


        as-boolean:     func() -> option<bool>;
        as-float4:      func() -> option<f32>;
        as-float8:      func() -> option<f64>;
        as-int1:        func() -> option<s8>;
        as-int2:        func() -> option<s16>;
        as-int4:        func() -> option<s32>;
        as-int8:        func() -> option<s64>;
        as-text:        func() -> option<string>;
        as-bytea:       func() -> option<list<u8>>;
        as-timestamptz: func() -> option<timestamptz>;
        as-timestamp:   func() -> option<timestamp>;
        as-uuid:        func() -> option<uuid>;

        /// Note that this function works for both json and jsonb types.
        as-json:        func() -> option<string>;
        as-inet:        func() -> option<ip-network>;


        as-boolean-array:       func() -> option<list<bool>>;
        as-float4-array:        func() -> option<list<f32>>;
        as-float8-array:        func() -> option<list<f64>>;
        as-int1-array:          func() -> option<list<s8>>;
        as-int2-array:          func() -> option<list<s16>>;
        as-int4-array:          func() -> option<list<s32>>;
        as-int8-array:          func() -> option<list<s64>>;
        as-text-array:          func() -> option<list<string>>;
        as-bytea-array:         func() -> option<list<list<u8>>>;
        as-timestamptz-array:   func() -> option<list<timestamptz>>;
        as-timestamp-array:     func() -> option<list<timestamp>>;
        as-uuid-array:          func() -> option<list<uuid>>;
        as-json-array:          func() -> option<list<string>>;
        as-inet-array:          func() -> option<list<ip-network>>;

        /// Create a null value with the provided type info.
        null: static func(tyinfo: type-info) -> value;

        boolean:        static func(value: bool) -> value;
        float4:         static func(value: f32) -> value;
        float8:         static func(value: f64) -> value;
        int1:           static func(value: s8) -> value;
        int2:           static func(value: s16) -> value;
        int4:           static func(value: s32) -> value;
        int8:           static func(value: s64) -> value;
        text:           static func(value: string) -> value;
        bytea:          static func(value: list<u8>) -> value;
        timestamptz:    static func(value: timestamptz) -> value;
        timestamp:      static func(value: timestamp) -> value;
        uuid:           static func(value: uuid) -> value;
        jsonb:          static func(value: string) -> value;
        inet:           static func(value: ip-network) -> result<value, string>;

        boolean-array:  static func(value: list<bool>) -> value;
        float4-array:   static func(value: list<f32>) -> value;
        float8-array:   static func(value: list<f64>) -> value;
        int1-array:     static func(value: list<s8>) -> value;
        int2-array:     static func(value: list<s16>) -> value;
        int4-array:     static func(value: list<s32>) -> value;
        int8-array:     static func(value: list<s64>) -> value;
        text-array:     static func(value: list<string>) -> value;
        bytea-array:    static func(value: list<list<u8>>) -> value;
        timestamptz-array: static func(value: list<timestamptz>) -> value;
        timestamp-array:static func(value: list<timestamp>) -> value;
        uuid-array:     static func(value: list<uuid>) -> value;
        jsonb-array:    static func(value: list<string>) -> value;
        inet-array:     static func(value: list<ip-network>) -> result<value, string>;
    }

    record column {
        name: string,
        value: value
    }

    record row {
        columns: list<column>
    }

    variant query-result {
        // A query has completed and here are the number of rows that were
        // modified.
        count(u64),

        // A single row from the query output.
        row(row)
    }

    record options {
        // Allows the runtime to limit the number of rows returned.
        //
        // Setting limit > 1 means that all rows will be returned.
        limit: u8,

        // Whether the runtime should keep the state in its query cache.
        //
        // This has no observable effects on the execution of the statement,
        // however it may be more performant if there are lots of instances of
        // the same workflow running on the same worker.
        persistent: bool,
    }

    record column-decode-error {
        index: string,
        source: string
    }

    enum database-error-kind {
        unique-violation,
        foreign-key-violation,
        not-null-violation,
        check-violation,
        other
    }

    record database-error {
        message: string,
        kind: database-error-kind,
        code: option<string>,
        constraint: option<string>,
        table: option<string>,
    }

    variant error {
        column-decode(column-decode-error),
        type-not-found(string),
        encode(string),
        decode(string),
        database(database-error),
        other(string)
    }

    /// Make a query to the database.
    /// 
    /// This function will start the query. Then rows and results can be
    /// fetched by calling `fetch` until it returns none.
    /// 
    /// Calling query again while there are still results from a previous query
    /// results in the remaining unconsumed rows being discarded.
    query: func(
        sql: string,
        params: list<value>,
        options: options,
    );

    /// Fetch either a query result or a single row from the query.
    fetch: func() -> option<result<query-result, error>>;
}
